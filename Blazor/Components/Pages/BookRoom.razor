@page "/bookroom/{Id:int}"
@using System.Linq
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject Service.DatabaseServices DBServices
@using API.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@code {
    // The room ID is passed as a parameter from the URL
    [Parameter]
    public int Id { get; set; }

    // Email field with validation annotations
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email address")]
    public string email { get; set; }

    // Room and user data models
    private GetRoomDTO SelectedRoom;
    private UserGetDTO SelectedUser;

    // Model for creating a new booking with default start and end dates
    private CreateBookingDTO newBooking = new CreateBookingDTO
        {
            BookingStartDate = DateTime.Now,
            BookingEndDate = DateTime.Now.AddDays(1)
        };

    // Modal state and total price variable
    private bool showModal = false;
    private decimal totalPrice;

    // On initialization, fetch room details based on the ID from the URL
    protected override async Task OnInitializedAsync()
    {
        try
        {
            SelectedRoom = await DBServices.GetRoomById(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching room data: {ex.Message}");
        }
    }

    // Method to get user details by email and create a booking
    private async Task GetUser()
    {
        try
        {
            // Fetch user data based on the entered email
            SelectedUser = await DBServices.GetUserByEmail(email);
            if (SelectedUser != null)
            {
                // Assign user and room IDs to the new booking
                newBooking.UserId = SelectedUser.Id;
                newBooking.RoomId = SelectedRoom.Id;

                // Calculate total price based on the number of nights booked
                int numberOfNights = (newBooking.BookingEndDate - newBooking.BookingStartDate).Days;
                totalPrice = SelectedRoom.Price * numberOfNights;

                // Create booking
                await DBServices.CreateBooking(newBooking);

                // Show confirmation modal
                showModal = true;
            }
            else
            {
                Console.WriteLine("User not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during booking: {ex.Message}");
        }
    }

    // Close modal and navigate back to the homepage
    private void CloseModal()
    {
        showModal = false;
        Navigation.NavigateTo("/");
    }
}

@if (SelectedRoom != null)
{
    <!-- Main booking page content when the selected room is available -->
    <div class="booking-page">
        <div class="booking-container">
            <!-- Room information section -->
            <div class="booking-room-info">
                <img src="@SelectedRoom.ImageURL" alt="Image of @SelectedRoom.RoomType" class="booking-room-image" />
                <h1 class="booking-room-title">@SelectedRoom.RoomType</h1>
                <p class="booking-room-price">@SelectedRoom.Price kr./night</p>
                <p class="booking-room-description">@SelectedRoom.Description</p>
            </div>

            <!-- Booking form section -->
            <div class="booking-form">
                <h2>Book this room</h2>
                <EditForm Model="this" OnValidSubmit="GetUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <!-- Email input field -->
                    <div class="form-group">
                        <label for="email">Email</label>
                        <input type="text" @bind="email" placeholder="Enter your email" class="form-control" />
                        <ValidationMessage For="@(() => email)" />
                    </div>

                    <!-- Check-in date input -->
                    <div class="form-group">
                        <label for="BookingStartDate">Check-in Date</label>
                        <InputDate id="checkInDate" class="form-control" TValue="DateTime" @bind-Value="newBooking.BookingStartDate" />
                        <ValidationMessage For="@(() => newBooking.BookingStartDate)" />
                    </div>

                    <!-- Check-out date input -->
                    <div class="form-group">
                        <label for="BookingEndDate">Check-out Date</label>
                        <InputDate id="checkOutDate" class="form-control" TValue="DateTime" @bind-Value="newBooking.BookingEndDate" />
                        <ValidationMessage For="@(() => newBooking.BookingEndDate)" />
                    </div>

                    <!-- Booking confirmation button -->
                    <button type="submit" class="btn-primary">Confirm Booking</button>
                </EditForm>
            </div>
        </div>
    </div>

    @if (showModal)
    {
        <!-- Booking confirmation modal -->
        <div class="modal">
            <div class="modal-content">
                <span class="close" @onclick="CloseModal">&times;</span>
                <h2>Booking Confirmation</h2>
                <p><strong>Room:</strong> @SelectedRoom.RoomType</p>
                <p><strong>Check-in:</strong> @newBooking.BookingStartDate.ToShortDateString()</p>
                <p><strong>Check-out:</strong> @newBooking.BookingEndDate.ToShortDateString()</p>
                <p><strong>Total Price:</strong> @totalPrice.ToString("0.00") kr.</p>
                <button @onclick="CloseModal" class="btn-primary">Close</button>
            </div>
        </div>
    }
}
else
{
    <!-- Message displayed when the room is not found -->
    <p>Room not found.</p>
}

<style>
    /* Styles for the main booking page layout */
    .booking-page {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #f4f4f9;
        padding: 20px;
    }

    .booking-container {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        background-color: #ffffff;
        border-radius: 12px;
        padding: 40px;
        max-width: 1400px;
        width: 100%;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
    }

    /* Room information styles */
    .booking-room-info {
        flex: 1;
        text-align: left;
        margin-right: 20px;
    }

    .booking-room-image {
        width: 100%;
        height: auto;
        max-height: 400px;
        object-fit: cover;
        border-radius: 12px;
        margin-bottom: 20px;
    }

    .booking-room-title {
        font-size: 2.5em;
        color: #333333;
        margin-bottom: 10px;
        font-weight: 700;
    }

    .booking-room-price {
        font-size: 1.8em;
        color: #cba135;
        margin-bottom: 20px;
        font-weight: bold;
    }

    .booking-room-description {
        font-size: 1.2em;
        color: #666666;
        margin-bottom: 30px;
    }

    /* Booking form styles */
    .booking-form {
        flex: 1;
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-control {
        width: 100%;
        padding: 12px;
        font-size: 1.1em;
        border-radius: 8px;
        border: 1px solid #ddd;
    }

    /* Primary button styles */
    .btn-primary {
        background-color: #cba135;
        color: white;
        padding: 15px 0;
        border-radius: 8px;
        font-size: 1.2em;
        font-weight: bold;
        transition: background-color 0.3s ease, transform 0.3s ease;
        border: none;
        cursor: pointer;
        width: 100%;
    }

        .btn-primary:hover {
            background-color: #b38b30;
            transform: scale(1.05);
        }

    /* Modal styles */
    .modal {
        display: flex;
        justify-content: center;
        align-items: center;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 500px;
        width: 100%;
        position: relative;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 1.5em;
        cursor: pointer;
    }
</style>

<script>
    // JavaScript to handle modal close button interaction
    document.addEventListener('DOMContentLoaded', () => {
        const modal = document.querySelector('.modal');
        if (modal) {
            document.querySelector('.close').addEventListener('click', () => {
                modal.style.display = 'none';
            });
        }
    });
</script>
